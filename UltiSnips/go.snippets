# Snippets for Go

priority -50

# when to abbriviate and when not?
# b doesn't work here, because it ignores whitespace
# optional local name?
snippet /^import/ "Import declaration" r
import (
	"${1:package}"
)
endsnippet

snippet /^package/ "Package declaration" r
// Package $1 provides ...
package ${1:main}
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "Constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "Constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

# types and variables
snippet map "Map type" b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}
endsnippet

snippet vars "Variables declaration" b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

snippet json "JSON field"
\`json:"${1:displayName}"\`
endsnippet

# vim:ft=snippets:

# error handling
snippet err "Basic error handling" b
if err != nil {
	log.${1:Fatal}(err)
}
endsnippet

# Libs
## Flags
snippet importflag "Import Flag"
"flag"
endsnippet

snippet flagstr "Flag String Var"
${1:varname} := flag.String("${2:arg}", "${3:default}","${4:description}")
endsnippet

snippet flagbool "Flag Bool Var"
${1:varname} := flag.Bool("${2:arg}", ${3:false}, "${4:description}")
endsnippet

snippet flagint "Flag Int Var"
${1:varname} := flag.Int("${2:arg}", ${3:42}, "${4:description}")
endsnippet
	
snippet flagparse "Parse flags"
flag.Parse()
endsnippet

snippet flagverb "Logging verbosity"
v := flag.Bool("v", false, "Logging set to Debug")
vv := flag.Bool("vv", false, "Logging set to Trace")
flag.Parse()
log.SetLevel(log.InfoLevel)
if *v {
	log.SetLevel(log.DebugLevel)
}
if *vv {
	log.SetLevel(log.TraceLevel)
}
endsnippet
	

## Logrus
snippet importlog "Import Logrus"
log "github.com/sirupsen/logrus"
endsnippet

snippet logt "Trace Log"
log.Trace("${1:log}")
endsnippet

snippet logd "Debug Log"
log.Debug("${1:log}")
endsnippet

snippet logi "Info Log"
log.Info("${1:log}")
endsnippet

snippet logw "Warn Log"
log.Warn("${1:log}")
endsnippet

snippet loge "Error Log"
log.Error("${1:log}")
endsnippet

snippet logf "Fatal Log"
log.Fatal("${1:log}")
endsnippet

snippet logp "Panic Log"
log.Panic("${1:log}")
endsnippet

snippet logfile "Log to a File"
var log_file = log.New()
file, err := os.OpenFile("logrus.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
if err == nil {
	log_file.Out = file
} else {
	log.Info("Failed to log to file, using default stderr")
}
endsnippet

	
